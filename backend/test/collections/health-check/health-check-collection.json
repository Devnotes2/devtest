{
  "info": {
    "name": "Health Check Collection",
    "description": "Health check test that runs 3 iterations with 5-minute intervals",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}",
      "type": "string"
    },
    {
      "key": "iterationDelay",
      "value": "{{iterationDelay}}",
      "type": "string"
    },
    {
      "key": "maxIterations",
      "value": "{{maxIterations}}",
      "type": "string"
    },
    {
      "key": "environment",
      "value": "{{environment}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "console.log('=== Health Check Test ===');",
              "console.log('Environment:', pm.collectionVariables.get('environment'));",
              "console.log('Iteration:', pm.environment.get('currentIteration') || 1);",
              "console.log('Base URL:', pm.collectionVariables.get('baseUrl'));",
              "console.log('Timestamp:', new Date().toISOString());"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test assertions",
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has valid JSON', function () {",
              "    pm.response.to.be.json;",
              "});",
              "",
              "pm.test('Response time is reasonable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);",
              "});",
              "",
              "pm.test('Response contains status field', function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('status');",
              "});",
              "",
              "// Log results",
              "console.log('=== Test Results ===');",
              "console.log('Status Code:', pm.response.code);",
              "console.log('Response Time:', pm.response.responseTime, 'ms');",
              "console.log('Response Size:', pm.response.responseSize, 'bytes');",
              "",
              "// Log test completion",
              "console.log('âœ… Health check test completed successfully');"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        },
        "description": "Health check endpoint to verify API is running"
      },
      "response": []
    }
  ]
}
